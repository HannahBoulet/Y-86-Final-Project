                            | # This program performs an insertion sort on a list of numbers.
                            | # Note the sort is in-place. At the end there is a single, sorted list.
                            | # If the program is correct, then the final memory dump should contain the 
                            | # following:
                            | # 100: 000000000000000a fffffffffffffff9 fffffffffffffffe 0000000000000002 
                            | # 120: 0000000000000003 0000000000000005 0000000000000009 000000000000000c 
                            | # 140: 000000000000000e 0000000000000017 000000000000001b 0000000000000000 
                            | #
0x000:                      |         .pos 0
0x000: 30f40002000000000000 |         irmovq stack, %rsp   #initialize stack pointer
0x00a: 30f70801000000000000 |         irmovq list, %rdi    #address of first element
0x014: 30f00001000000000000 |         irmovq len, %rax     #address of length of list
0x01e: 50000000000000000000 |         mrmovq (%rax), %rax  #load length of list
0x028: 30f60800000000000000 |         irmovq 8, %rsi       #offset of current element to insert
0x032: 30f10100000000000000 |         irmovq 1, %rcx       #length of sorted list 
                            | #  
                            | # loop inserting each element into a sorted list
                            | # first iteration: insert 3 into list containing 14 giving the list 3 14
                            | # second iteration: insert 2 into the list containing 3 14 giving the list 2 3 14
                            | # third iteration: insert 27 into the list contain 2 3 14 giving 2 3 14 27
                            | # stop when the length of the sorted list is equal to the length of list
                            | # 
                            | # TODO: Provide missing code (see description below of insert function)
                            | #
0x03c:                      | loop:
0x03c: 805c00000000000000   |         call insert 
                            | 
0x045: 30f30100000000000000 |         irmovq $1, %rbx         #incrementing rcx 
0x04f: 6131                 |         subq %rbx, %rcx
                            | 
0x051: 6110                 |         subq %rcx, %rax         # if rax = rcx 
0x053: 73b700000000000000   |         je done
                            |         
                            | 
                            |               
                            | #
                            | # insert function
                            | # Takes the address of the first element in the list
                            | # and the offset from that address of the new element to insert
                            | # and swaps the values of consecutive elements until the new element
                            | # is in the correct spot.
                            | # For example, suppose current list is -2 2 3 14 27
                            | # Next element to insert is 9 (which in memory is right after the 27)
                            | # The insert function will loop:
                            | # after first iteration the list will be: -2 2 4 14 9 27
                            | # after second iteration the list will be: -2 2 4 9 14 27
                            | # Now, the function is exited because the 9 is in the right spot (> 4)
                            | #
                            | # TODO: write the insert function
0x05c:                      | insert:
0x05c: 2078                 |         rrmovq %rdi, %r8
0x05e: 6068                 |         addq %rsi, %r8                  # get next element 
0x060:                      | loop:
0x060: 50980000000000000000 |         mrmovq (%r8), %r9 
0x06a: 50a8f8ffffffffffffff |         mrmovq -8(%r8), %r10            # current element 
                            | 
0x074: 209c                 |         rrmovq %r9, %r12
0x076: 61ac                 |         subq %r10, %r12 
0x078: 75b700000000000000   |         jge done                         # if negative, new element in right spot
                            | 
                            |         # swap 
0x081: 40a80000000000000000 |         rmmovq %r10, (%r8)
0x08b: 4098f8ffffffffffffff |         rmmovq %r9, -8(%r8)
                            | 
0x095: 30fd0800000000000000 |         irmovq $8, %r13
0x09f: 61d8                 |         subq %r13, %r8 
                            | 
0x0a1: 208e                 |         rrmovq %r8, %r14
0x0a3: 617e                 |         subq %rdi, %r14 
0x0a5: 73b700000000000000   |         je done
                            | 
0x0ae: 703c00000000000000   |         jmp loop 
                            | 
0x0b7:                      | done:
0x0b7: 90                   |         ret
                            | #
                            | #        list data
0x100:                      |         .pos 0x100
0x100: 0a00000000000000     | len:    .quad 10 
0x108: 0e00000000000000     | list:   .quad 14
0x110: 0300000000000000     |         .quad 3
0x118: 0200000000000000     |         .quad 2
0x120: 1b00000000000000     |         .quad 27
0x128: feffffffffffffff     |         .quad -2
0x130: 0c00000000000000     |         .quad 12
0x138: 1700000000000000     |         .quad 23
0x140: 0500000000000000     |         .quad 5
0x148: f9ffffffffffffff     |         .quad -7
0x150: 0900000000000000     |         .quad 9
                            | 
                            | #       stack    
0x200:                      |         .pos 0x200
0x200: 0000000000000000     | stack:  .quad 0    
